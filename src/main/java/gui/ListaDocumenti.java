package gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import controller.Controller;
import model.Documento;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

import static utils.Utils.COLONNE_LISTA_DOCUMENTI;

public class ListaDocumenti {

    private JPanel panel1;
    private JTable table1;
    private JButton avantiButton;
    private JButton tornaIndietroButton;
    public JFrame dettagliHackathonFrame;
    public JFrame listaDocumentiFrame;
    public JFrame frameChiamante;
    public DefaultTableModel listaDocumentiModel;
    private Controller controller;


    public ListaDocumenti(JFrame frameChiamante, Controller controller) {

        this.dettagliHackathonFrame = frameChiamante;
        this.listaDocumentiFrame = new JFrame("ListaDocumenti");
        this.controller = controller;

        listaDocumentiFrame.setContentPane(panel1);
        listaDocumentiFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        listaDocumentiFrame.pack();

        List<Documento> listaDocumenti = controller.getDocumentiByIdHackathon(controller.getIdHackathon());

        Object[][] datiTable = new Object[listaDocumenti.size()][4];

        for (int i = 0; i < listaDocumenti.size(); i++) {
            datiTable[i][0] = listaDocumenti.get(i).getId();
            datiTable[i][1] = listaDocumenti.get(i).getTeam().getNome();
            datiTable[i][2] = listaDocumenti.get(i).getVersione();
        }


        DefaultTableModel tabellaDocumenti = new DefaultTableModel(datiTable, COLONNE_LISTA_DOCUMENTI) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return switch (columnIndex) {
                    case 0 -> Long.class;
                    default -> String.class;
                };
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };
        this.listaDocumentiModel = tabellaDocumenti;
        table1.setModel(tabellaDocumenti);

        avantiButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int riga = table1.getSelectedRow();
                if (riga == -1) {
                    JOptionPane.showMessageDialog(panel1, "Seleziona un documento");
                    return;
                }
                Long id = Long.parseLong(table1.getValueAt(riga, 0).toString());

                controller.setIdDocumento(id);
                EffettuaCommentoGiudice effettuaCommentoGiudice = new EffettuaCommentoGiudice(controller,listaDocumentiFrame);
                effettuaCommentoGiudice.effettuaCommentoGiudiceFrame.setVisible(true);
                listaDocumentiFrame.setVisible(false);
                listaDocumentiFrame.dispose();
            }
        });

        tornaIndietroButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dettagliHackathonFrame.setVisible(true);
                listaDocumentiFrame.setVisible(false);
                listaDocumentiFrame.dispose();


            }
        });
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(4, 3, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("LISTA DOCUMENTI");
        panel1.add(label1, new GridConstraints(0, 0, 2, 3, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        table1 = new JTable();
        JScrollPane scrollPane = new JScrollPane(table1);
        panel2.add(scrollPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        avantiButton = new JButton();
        avantiButton.setText("Avanti");
        panel1.add(avantiButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tornaIndietroButton = new JButton();
        tornaIndietroButton.setText("Torna indietro");
        panel2.add(tornaIndietroButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));

    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
