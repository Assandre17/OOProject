package gui;


import controller.Controller;
import model.Partecipante;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

import static utils.Utils.COLONNE_LISTA_PARTECIPANTI;


public class ListaPartecipanti {
    private JPanel panel1;
    private JTable table1;
    private JButton invitaButton;
    private JButton tornaAllaHomeButton;
    public JFrame listaPartecipantiFrame;
    public JFrame creaTeamFrame;
    public JFrame homePartecipanteFrame;
    public DefaultTableModel listaPartecipantiModel;
    private Controller controller;


    public ListaPartecipanti(JFrame creaTeamFrame, JFrame homePartecipanteFrame, Controller controller) {

        this.creaTeamFrame = creaTeamFrame;
        this.homePartecipanteFrame = homePartecipanteFrame;
        this.listaPartecipantiFrame = new JFrame("ListaPartecipanti");
        this.controller = controller;

        listaPartecipantiFrame.setContentPane(panel1);
        listaPartecipantiFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        listaPartecipantiFrame.pack();

        List<Partecipante> listaPartecipanti = getMockPartecipanti();
        String nomeTeam = controller.getNomeTeam();

        Object[][] datiTable = new Object[listaPartecipanti.size()][4];

        for (int i = 0; i < listaPartecipanti.size(); i++) {
            datiTable[i][0] = false;
            datiTable[i][1] = listaPartecipanti.get(i).getId();
            datiTable[i][2] = listaPartecipanti.get(i).getNome();
            datiTable[i][3] = listaPartecipanti.get(i).getCognome();
        }


        DefaultTableModel tabellaPartecipanti = new DefaultTableModel(datiTable, COLONNE_LISTA_PARTECIPANTI) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return switch (columnIndex) {
                    case 0 -> Boolean.class;
                    case 1 -> Long.class;
                    default -> String.class;
                };
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return columnIndex == 0;
            }
        };
        this.listaPartecipantiModel = tabellaPartecipanti;
        table1.setModel(tabellaPartecipanti);

        invitaButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                List<Partecipante> partecipantiChecked = getCheckedPartecipanti(tabellaPartecipanti,listaPartecipanti);
                controller.creaTeam(nomeTeam, partecipantiChecked);
                JOptionPane.showMessageDialog(panel1, "Invito inviato con successo");
            }
        });

        tornaAllaHomeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                homePartecipanteFrame.setVisible(true);
                listaPartecipantiFrame.setVisible(false);
                listaPartecipantiFrame.dispose();


            }
        });

    }

    private List<Partecipante> getCheckedPartecipanti(DefaultTableModel tabellaPartecipanti, List<Partecipante> listaPartecipanti){
        List<Partecipante> partecipantiChecked = new ArrayList<>();
        for (int i = 0; i < listaPartecipanti.size(); i++) {
            Boolean check = (Boolean) tabellaPartecipanti.getValueAt(i,0);

            if (Boolean.TRUE.equals(check)) {
                Long id = (Long) tabellaPartecipanti.getValueAt(i,1);
                Partecipante partecipantechecked = listaPartecipanti.stream()
                        .filter(partecipante -> partecipante.getId().equals(id))
                        .findFirst().orElse(null);
                partecipantiChecked.add(partecipantechecked);
            }
        }

        return partecipantiChecked;
    }

    //metodo temporaneo che restituisce una lista di partecipanti mockata
    private List<Partecipante> getMockPartecipanti() {
        Partecipante partecipante1 = new Partecipante("Marco", "Rossi");
        partecipante1.setId(1L);
        Partecipante partecipante2 = new Partecipante("Pippo", "Pluto");
        partecipante2.setId(2L);
        List<Partecipante> listaPartecipanti = new ArrayList<>();
        listaPartecipanti.add(partecipante1);
        listaPartecipanti.add(partecipante2);
        return listaPartecipanti;
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 3, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("LISTA PARTECIPANTI DA INVITARE");
        panel1.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 2, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTH, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        table1 = new JTable();
        JScrollPane scrollPane = new JScrollPane(table1);
        panel2.add(scrollPane, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        invitaButton = new JButton();
        invitaButton.setText("Invita");
        panel1.add(invitaButton, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tornaAllaHomeButton = new JButton();
        tornaAllaHomeButton.setText("torna alla home");
        panel2.add(tornaAllaHomeButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));


    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
