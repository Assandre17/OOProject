package gui;


import com.intellij.uiDesigner.core.GridLayoutManager;
import controller.Controller;
import model.Giudice;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import static utils.Utils.COLONNE_LISTA_PARTECIPANTI;


public class ListaGiudici {
    private JPanel panel1;
    private JTable table1;
    private JButton invitaButton;
    private JButton tornaAllaHomeButton;
    public JFrame listaGiudiciFrame;
    public JFrame mittenteFrame;
    public DefaultTableModel listaGiudiciModel;
    private Controller controller;


    public ListaGiudici(JFrame mittenteFrame, Controller controller) {

        this.mittenteFrame = mittenteFrame;
        this.listaGiudiciFrame = new JFrame("ListaGiudici");
        this.controller = controller;

        listaGiudiciFrame.setContentPane(panel1);
        listaGiudiciFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        listaGiudiciFrame.pack();

        List<Giudice> listaGiudici = getMockGiudici();
        String nomeTeam = controller.getNomeTeam();

        Object[][] datiTable = new Object[listaGiudici.size()][4];

        for (int i = 0; i < listaGiudici.size(); i++) {
            datiTable[i][0] = false;
            datiTable[i][1] = listaGiudici.get(i).getId();
            datiTable[i][2] = listaGiudici.get(i).getNome();
            datiTable[i][3] = listaGiudici.get(i).getCognome();
        }


        DefaultTableModel tabellaGiudici = new DefaultTableModel(datiTable, COLONNE_LISTA_PARTECIPANTI) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return switch (columnIndex) {
                    case 0 -> Boolean.class;
                    case 1 -> Long.class;
                    default -> String.class;
                };
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return columnIndex == 0;
            }
        };
        this.listaGiudiciModel = tabellaGiudici;
        table1.setModel(tabellaGiudici);

        invitaButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                List<Giudice> GiudiciChecked = getCheckedGiudici(tabellaGiudici, listaGiudici);
                try {
                    controller.invitaGiudice(controller.getIdHackathon()); //veniva passato anche list<giudici> come parametro ma l'ho tolta pk se devo fare il get... (vuol dire che mi serve e allora come la passo??)
                } catch (SQLException ex) {
                    throw new RuntimeException(ex);
                }
                JOptionPane.showMessageDialog(panel1, "Invito inviato con successo");
                mittenteFrame.setVisible(true);
                listaGiudiciFrame.setVisible(false);
                listaGiudiciFrame.dispose();
            }
        });

        tornaAllaHomeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                mittenteFrame.setVisible(true);
                listaGiudiciFrame.setVisible(false);
                listaGiudiciFrame.dispose();
            }
        });

    }

    private List<Giudice> getCheckedGiudici(DefaultTableModel tabellaGiudici, List<Giudice> listaGiudici) {
        List<Giudice> GiudiciChecked = new ArrayList<>();
        for (int i = 0; i < listaGiudici.size(); i++) {
            Boolean check = (Boolean) tabellaGiudici.getValueAt(i, 0);

            if (Boolean.TRUE.equals(check)) {
                Long id = (Long) tabellaGiudici.getValueAt(i, 1);
                Giudice Giudicechecked = listaGiudici.stream()
                        .filter(Giudice -> Giudice.getId().equals(id))
                        .findFirst().orElse(null);
                GiudiciChecked.add(Giudicechecked);
            }
        }

        return GiudiciChecked;
    }

    //metodo temporaneo che restituisce una lista di Giudici mockata
    private List<Giudice> getMockGiudici() {
        Giudice Giudice1 = new Giudice(null, "Marco", "Rossi", "prova", "prova");
        Giudice1.setId(1L);
        Giudice Giudice2 = new Giudice(null,"Pippo", "Pluto", "prova", "prova");
        Giudice2.setId(2L);
        List<Giudice> listaGiudici = new ArrayList<>();
        listaGiudici.add(Giudice1);
        listaGiudici.add(Giudice2);
        return listaGiudici;
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
