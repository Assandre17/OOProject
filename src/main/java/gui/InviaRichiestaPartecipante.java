package gui;


import com.intellij.uiDesigner.core.GridLayoutManager;
import controller.Controller;
import model.Partecipante;
import model.Team;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static utils.Utils.COLONNE_LISTA_TEAM;


public class InviaRichiestaPartecipante {
    private JPanel panel1;
    private JTable table1;
    public JFrame inviaRichiestaPartecipanteFrame;
    public JFrame mittenteFrame;
    private Controller controller;
    private JButton inviaRichiestaButton;
    private JButton tornaIndietroButton;
    private ActionButton actionButton;


    public InviaRichiestaPartecipante(JFrame mittenteFrame, Controller controller) {

        this.mittenteFrame = mittenteFrame;
        this.inviaRichiestaPartecipanteFrame = new JFrame("InviaRichiestaPartecipante");
        this.controller = controller;
        inviaRichiestaPartecipanteFrame.setContentPane(panel1);
        inviaRichiestaPartecipanteFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        inviaRichiestaPartecipanteFrame.pack();
        this.actionButton = controller.getActionButton();
        this.inviaRichiestaButton.setText(controller.getNomeButton());

        List<Team> listaTeam = getMockTeam();

        Object[][] datiTable = new Object[listaTeam.size()][4];

        for (int i = 0; i < listaTeam.size(); i++) {
            datiTable[i][0] = listaTeam.get(i).getId();
            datiTable[i][1] = listaTeam.get(i).getNome();
        }


        DefaultTableModel tabellaTeam = new DefaultTableModel(datiTable, COLONNE_LISTA_TEAM) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return switch (columnIndex) {
                    case 0 -> Long.class;
                    default -> String.class;
                };
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };

        inviaRichiestaButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int rigaSelezionata = table1.getSelectedRow();
                if (rigaSelezionata < 0) {
                    JOptionPane.showMessageDialog(panel1, "Seleziona un Team");
                    return;
                }
                Long idTeam = (Long) table1.getValueAt(rigaSelezionata, 0);
                controller.setIdTeam(idTeam);

                if (inviaRichiestaButton.getText().equals("Invia richiesta")) {
                    inviaRichiestaIngressoTeam(idTeam, listaTeam);
                    mittenteFrame.setVisible(true);
                }

                actionButton.doAction();
                inviaRichiestaPartecipanteFrame.setVisible(false);
                inviaRichiestaPartecipanteFrame.dispose();

            }
        });

        tornaIndietroButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                mittenteFrame.setVisible(true);
                inviaRichiestaPartecipanteFrame.setVisible(false);
                inviaRichiestaPartecipanteFrame.dispose();


            }
        });

        table1.setModel(tabellaTeam);
        table1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);


    }

    private void inviaRichiestaIngressoTeam(Long idTeam, List<Team> listaTeam) {
        Optional<Team> teamRichiesto = listaTeam.stream()
                .filter(Team -> Team.getId().equals(idTeam))
                .findFirst();

        this.actionButton = new ActionButton() {
            @Override
            public void doAction() {
                controller.richiestaIngressoTeam((Partecipante) controller.getUtente(), teamRichiesto.get());
                JOptionPane.showMessageDialog(panel1, "Richiesta d'ingresso inviata");
            }
        };

    }

    private List<Team> getMockTeam() {
        Team Team1 = new Team();
        Team1.setId(1L);

        Team Team2 = new Team();
        Team2.setId(2L);

        List<Team> listaTeam = new ArrayList<>();
        listaTeam.add(Team1);
        listaTeam.add(Team2);
        return listaTeam;

    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
