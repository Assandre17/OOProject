package gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import controller.Controller;
import model.Documento;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Locale;

/**
 * The type Effettua commento giudice.
 */
public class EffettuaCommentoGiudice {
    private JTextPane commentoField;
    private JButton pubblicaCommentoButton;
    private JButton tornaIndietroButton;
    private JLabel commentoLabel;
    private JPanel panel1;
    private JLabel dettaglioDocumentoLabel;
    private JLabel descrizioneLabel;
    /**
     * The Effettua commento giudice frame.
     */
    public JFrame effettuaCommentoGiudiceFrame;
    /**
     * The Controller.
     */
    public Controller controller;

    /**
     * Instantiates a new Effettua commento giudice.
     *
     * @param controller    the controller
     * @param mittenteFrame the mittente frame
     */
    public EffettuaCommentoGiudice(Controller controller, JFrame mittenteFrame) {
        effettuaCommentoGiudiceFrame = new JFrame("EffettuaCommentoGiudice");
        this.controller = controller;
        effettuaCommentoGiudiceFrame.setContentPane(panel1);
        effettuaCommentoGiudiceFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        effettuaCommentoGiudiceFrame.pack();

        Documento documento = controller.getDocumentoById(controller.getIdDocumento());
        descrizioneLabel.setText(documento.getDescrizione());


        pubblicaCommentoButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String descrizione = commentoField.getText();
                try {
                    if (descrizione.isBlank()) {
                        throw new IllegalArgumentException("la descrizione non puÃ² essere vuota");
                    }

                    controller.pubblicaCommento(descrizione, controller.getIdDocumento());
                    JOptionPane.showMessageDialog(panel1, "Commento pubblicato!");
                    HomeGiudice homeGiudice = new HomeGiudice(controller);
                    homeGiudice.homeGiudiceFrame.setVisible(true);

                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(panel1, ex.getMessage());
                    throw new RuntimeException(ex);
                }

                effettuaCommentoGiudiceFrame.setVisible(false);
                effettuaCommentoGiudiceFrame.dispose();

            }
        });

        tornaIndietroButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                mittenteFrame.setVisible(true);
                effettuaCommentoGiudiceFrame.setVisible(false);
                effettuaCommentoGiudiceFrame.dispose();
            }
        });


    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(5, 2, new Insets(0, 0, 0, 0), -1, -1));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        pubblicaCommentoButton = new JButton();
        pubblicaCommentoButton.setText("Pubblica commento");
        panel1.add(pubblicaCommentoButton, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tornaIndietroButton = new JButton();
        tornaIndietroButton.setText("Torna indietro");
        panel1.add(tornaIndietroButton, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        dettaglioDocumentoLabel = new JLabel();
        Font dettaglioDocumentoLabelFont = this.$$$getFont$$$(null, Font.BOLD, -1, dettaglioDocumentoLabel.getFont());
        if (dettaglioDocumentoLabelFont != null) dettaglioDocumentoLabel.setFont(dettaglioDocumentoLabelFont);
        dettaglioDocumentoLabel.setText("Dettaglio Documento");
        panel2.add(dettaglioDocumentoLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        descrizioneLabel = new JLabel();
        descrizioneLabel.setText("");
        panel2.add(descrizioneLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        commentoLabel = new JLabel();
        commentoLabel.setText("Commento");
        panel1.add(commentoLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        commentoField = new JTextPane();
        panel1.add(commentoField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * $$$ get root component $$$ j component.
     *
     * @return the j component
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
