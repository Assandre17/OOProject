package main.java.gui;

import main.java.controller.Controller;
import main.java.model.Hackathon;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

public class HackathonCreatiOrganizzatore {

    private JPanel panel1;
    private JTable table1;
    private JButton dettaglioButton;
    public JFrame listaHackathonCFrame;
    public JFrame homeOrganizzatoreFrame;
    public DefaultTableModel listaHackathonCModel;
    private Controller controller;
    public Dialog hcoFrame;


    /*public HackathonCreatiOrganizzatore(JFrame homeOrganizzatoreFrame, Controller controller) {
    this.homeOrganizzatoreFrame = homeOrganizzatoreFrame;
    this.listaHackathonCFrame = new JFrame("Lista Hackathon Creati");
    this.controller = controller;

    listaHackathonCFrame.setContentPane(panel1);
    listaHackathonCFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    listaHackathonCFrame.pack();

    List<Hackathon> listaHackathon = getMockHackathon();
    Object[][] datiTable = new Object[listaHackathon.size()][4];

    for (int i = 0; i < listaHackathon.size(); i++) {
        datiTable[i][0] = false;
        datiTable[i][1] = listaHackathon.get(i).getId();
        datiTable[i][2] = listaHackathon.get(i).getNome();
        datiTable[i][3] = listaHackathon.get(i).getTema();
    }

    DefaultTableModel tabellaHackathon = new DefaultTableModel(datiTable, COLONNE_LISTA_HACKATHON) {
        @Override
        public Class<?> getColumnClass(int columnIndex) {
            return switch (columnIndex) {
                case 0 -> Boolean.class;
                case 1 -> Long.class;
                default -> String.class;
            };
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return columnIndex == 0;
        }
    };
    this.listaHackathonCModel = tabellaHackathon;
    table1.setModel(tabellaHackathon);

    dettaglioButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            List<Hackathon> hackathonChecked = getCheckedHackathon(tabellaHackathon, listaHackathon);
            homeOrganizzatoreFrame.setVisible(true);
            listaHackathonCFrame.setVisible(false);
            listaHackathonCFrame.dispose();
        }
    });
}

private List<Hackathon> getCheckedHackathon(DefaultTableModel tabellaHackathon, List<Hackathon> listaHackathon) {
    ArrayList<Object> hackathonChecked = new ArrayList<>();
    for (int i = 0; i < listaHackathon.size(); i++) {
        Boolean check = (Boolean) tabellaHackathon.getValueAt(i, 0);
        if (Boolean.TRUE.equals(check)) {
            Long id = (Long) tabellaHackathon.getValueAt(i, 1);
            Hackathon checked = listaHackathon.stream()
                    .filter(h -> h.getId().equals(id))
                    .findFirst().orElse(null);
            hackathonChecked.add(checked);
        }
    }
    return hackathonChecked;
}

// Metodo mock temporaneo
private List<Hackathon> getMockHackathon() {
    Hackathon h1 = new Hackathon("Hack for Health", "Sanità digitale");
    h1.setId(1L);
    Hackathon h2 = new Hackathon("Green Code Challenge", "Sostenibilità ambientale");
    h2.setId(2L);
    List<Hackathon> lista = new ArrayList<>();
    lista.add(h1);
    lista.add(h2);
    return lista;
}*/


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Lista Hackathon creati dall'organizzatore:");
        panel1.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        table1 = new JTable();
        panel1.add(table1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
    }
}
