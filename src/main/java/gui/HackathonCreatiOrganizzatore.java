package main.java.gui;

import main.java.controller.Controller;
import main.java.model.Hackathon;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.util.List;


public class HackathonCreatiOrganizzatore {

    private JPanel panel1;
    private JTable table1;
    private JButton dettaglioButton;
    public JFrame listaHackathonCFrame;
    public JFrame homeOrganizzatoreFrame;
    public DefaultTableModel listaHackathonCModel;
    private Controller controller;
    public JFrame hcoFrame;


    public HackathonCreatiOrganizzatore(JFrame homeOrganizzatoreFrame){//, Controller controller) {
    this.homeOrganizzatoreFrame = homeOrganizzatoreFrame;
    this.hcoFrame = new JFrame("HackathonCreatiOrganizzatore");
    this.controller = controller;

    listaHackathonCFrame.setContentPane(panel1);
    listaHackathonCFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    listaHackathonCFrame.pack();

    List<Hackathon> listaHackathon = getMockHackathon();
    Object[][] datiTable = new Object[listaHackathon.size()][3];

    for (int i = 0; i < listaHackathon.size(); i++) {
        datiTable[i][0] = i + 1; // numero progressivo hackathon
        datiTable[i][1] = listaHackathon.get(i).getNome();
        datiTable[i][2] = "Vedi";
    }

    DefaultTableModel tabellaHackathon = new DefaultTableModel(datiTable, new String[]{"ID", "Nome", "Azione"}) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return column == 2;
        }
    };
    this.listaHackathonCModel = tabellaHackathon;
    table1.setModel(tabellaHackathon);

    table1.getColumn("Azione").setCellRenderer(new ButtonRenderer());
    table1.getColumn("Azione").setCellEditor(new ButtonEditor(listaHackathon));

    listaHackathonCFrame.setVisible(true);
}

class ButtonRenderer extends JButton implements TableCellRenderer {
    public ButtonRenderer() {
        setText("Vedi");
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value,
                                                   boolean isSelected, boolean hasFocus,
                                                   int row, int column) {
        return this;
    }
}

class ButtonEditor extends DefaultCellEditor {
    private JButton button;
    private boolean clicked;
    private Hackathon selectedHackathon;
    private List<Hackathon> hackathonList;

    public ButtonEditor(List<Hackathon> hackathonList) {
        super(new JTextField()); // niente checkbox
        this.hackathonList = hackathonList;
        button = new JButton("Vedi");
        button.addActionListener(e -> fireEditingStopped());
    }

    @Override
    public Component getTableCellEditorComponent(JTable table, Object value,
                                                 boolean isSelected, int row, int col) {
        selectedHackathon = hackathonList.get(row);
        clicked = true;
        return button;
    }

    @Override
    public Object getCellEditorValue() {
        if (clicked) {
            JOptionPane.showMessageDialog(button,
                "Dettagli Hackathon:\nNome: " + selectedHackathon.getNome());
        }
        clicked = false;
        return "Vedi";
    }

    @Override
    public boolean stopCellEditing() {
        clicked = false;
        return super.stopCellEditing();
    }
}

private List getMockHackathon() {
    Hackathon h1 = new Hackathon();
    Hackathon h2 = new Hackathon();
    h1.setNome("Hackathon 1");
    h2.setNome("Hackathon 2");
    return List.of(h1, h2);
}



    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Lista Hackathon creati dall'organizzatore:");
        panel1.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        table1 = new JTable();
        panel1.add(table1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
    }
}
