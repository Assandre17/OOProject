package main.java.gui;

import main.java.controller.Controller;
import main.java.model.Hackathon;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

import static main.java.utils.Utils.COLONNE_LISTA_HACKATHON;


public class HackathonCreatiOrganizzatore {
    private JPanel panel1 = new JPanel(); // proviamo a inizializzarlo
    private JTable table1;
    private JButton dettaglioButton;
    private JButton tornaAllaHomeButton;
    public JFrame listaHackathonCFrame;
    public JFrame homeUtenteFrame;
    public DefaultTableModel listaHackathonCModel;
    private Controller controller;
    private ActionButton actionButton;
    public JFrame hcoFrame;

    public HackathonCreatiOrganizzatore(JFrame homeUtenteFrame, Controller controller) {
    this.homeUtenteFrame = homeUtenteFrame;
    this.controller = controller;
    this.actionButton = controller.getActionButton();
    this.dettaglioButton.setText(controller.getNomeButton());

    this.hcoFrame = new JFrame("HackathonCreatiOrganizzatore");
    hcoFrame.setContentPane(panel1); //hcoFrame invece di listaHackathonCFrame
    hcoFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    hcoFrame.pack();

        List<Hackathon> listaHackathon = getMockHackathon();

        Object[][] datiTable = new Object[listaHackathon.size()][4];

        for (int i = 0; i < listaHackathon.size(); i++) {
            datiTable[i][0] = listaHackathon.get(i).getId();
            datiTable[i][1] = listaHackathon.get(i).getNome();
            datiTable[i][2] = listaHackathon.get(i).getDescrizione();
         }


        DefaultTableModel tabellaHackathon = new DefaultTableModel(datiTable, COLONNE_LISTA_HACKATHON) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return switch (columnIndex) {
                    case 0 -> Long.class;
                    default -> String.class;
                };
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };

        tornaAllaHomeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                homeUtenteFrame.setVisible(true);
                hcoFrame.setVisible(false);
                hcoFrame.dispose();
            }
        });

        dettaglioButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int riga = table1.getSelectedRow();
                if(riga == -1){
                    JOptionPane.showMessageDialog(panel1, "Seleziona un hackathon");
                    return;
                }
                Long id = Long.parseLong(table1.getValueAt(riga, 0).toString());
                controller.setIdHackathon(id);
                actionButton.doAction();
                hcoFrame.setVisible(false);
                hcoFrame.dispose();
            }
        });
        table1.setModel(tabellaHackathon);
    }


    private List<Hackathon> getMockHackathon() {
        Hackathon hackathon1 = new Hackathon();
        hackathon1.setId(1L);
        hackathon1.setNome("Hackathon1");
        hackathon1.setDescrizione("Questo è Hackathon1");

        Hackathon hackathon2 = new Hackathon();
        hackathon2.setId(2L);
        hackathon2.setNome("Hackathon2");
        hackathon2.setDescrizione("Questo è Hackathon2");

        List<Hackathon> listaHackathon = new ArrayList<>();
        listaHackathon.add(hackathon1);
        listaHackathon.add(hackathon2);
        return listaHackathon;
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 3, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("LISTA HACKATHON");
        panel1.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 2, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTH, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        table1 = new JTable();
        JScrollPane scrollPane = new JScrollPane(table1);
        panel2.add(scrollPane, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        dettaglioButton = new JButton();
        panel1.add(dettaglioButton, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tornaAllaHomeButton = new JButton();
        tornaAllaHomeButton.setText("torna alla home");
        panel2.add(tornaAllaHomeButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }
}
