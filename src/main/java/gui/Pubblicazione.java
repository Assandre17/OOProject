package gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import controller.Controller;
import model.Documento;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDate;

public class Pubblicazione {
    private JPanel panel1;
    private JLabel descrizioneProblemaLabel;
    private JTextPane textPane1;
    private JButton pubblicaButton;
    private JButton tornaIndietroButton;
    public JFrame pubblicazioneFrame;
    private Controller controller;
    private ActionButton actionButton;

    public Pubblicazione(Controller controller, JFrame mittenteFrame) {
        pubblicazioneFrame = new JFrame("Pubblicazione");
        this.controller = controller;
        pubblicazioneFrame.setContentPane(panel1);
        pubblicazioneFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        pubblicazioneFrame.pack();
        this.actionButton = controller.getActionButton();
        this.pubblicaButton.setText(controller.getNomeButton());


        pubblicaButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String descrizione = textPane1.getText();

                if (checkDescrizioneIsEmpty(descrizione)) {
                    return;
                }

                if (pubblicaButton.getText().equals("Pubblica Problema")) {
                    pubblicaProblema(descrizione);
                } else {
                    pubblicaProgresso(descrizione);
                }

                actionButton.doAction();

                pubblicazioneFrame.setVisible(false);
                pubblicazioneFrame.dispose();

            }
        });

        tornaIndietroButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                mittenteFrame.setVisible(true);
                pubblicazioneFrame.setVisible(false);
                pubblicazioneFrame.dispose();

            }
        });

    }

    private void pubblicaProblema(String descrizione) {
        this.actionButton = new ActionButton() {
            @Override
            public void doAction() {
                controller.pubblicaProblema(descrizione, controller.getIdHackathon());
                JOptionPane.showMessageDialog(panel1, "Problema pubblicato!");
                HomeGiudice homeGiudice = new HomeGiudice(controller);
                homeGiudice.homeGiudiceFrame.setVisible(true);
            }
        };

    }

    private void pubblicaProgresso(String descrizione) {
        Documento documento = new Documento(descrizione, "1.0", LocalDate.now());
        this.actionButton = new ActionButton() {
            @Override
            public void doAction() {
                controller.pubblicaDocumento(documento);
                JOptionPane.showMessageDialog(panel1, "Documento pubblicato!");
                HomePartecipante homePartecipante = new HomePartecipante(controller);
                homePartecipante.homePartecipanteFrame.setVisible(true);
            }
        };

    }

    private boolean checkDescrizioneIsEmpty(String problema) {
        if (problema.isBlank()) {
            JOptionPane.showMessageDialog(pubblicazioneFrame, "Inserisci descrizione!");
            return true;
        }
        return false;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(6, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Pubblica");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        descrizioneProblemaLabel = new JLabel();
        descrizioneProblemaLabel.setText("Descrizione");
        panel1.add(descrizioneProblemaLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textPane1 = new JTextPane();
        panel1.add(textPane1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        pubblicaButton = new JButton();
        pubblicaButton.setText("Pubblica");
        panel1.add(pubblicaButton, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tornaIndietroButton = new JButton();
        tornaIndietroButton.setText("Torna indietro");
        panel1.add(tornaIndietroButton, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
